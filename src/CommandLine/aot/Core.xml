<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="P:Core.Config.IsSplitController">
            <summary>
            是否拆分
            </summary>
        </member>
        <member name="P:Core.Config.IsMicroservice">
            <summary>
            是否为微服务
            </summary>
        </member>
        <member name="P:Core.Config.ServiceName">
            <summary>
            微服务名称
            </summary>
        </member>
        <member name="P:Core.Config.EnumModels">
            <summary>
            存储ts枚举类
            </summary>
        </member>
        <member name="M:Core.Config.GetServiceConfig(System.String)">
            <summary>
            获取服务的默认路径
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Entities.ApiDocInfo">
            <summary>
            接口文档
            </summary>
        </member>
        <member name="P:Core.Entities.ApiDocInfo.Name">
            <summary>
            文档名称
            </summary>
        </member>
        <member name="P:Core.Entities.ApiDocInfo.Description">
            <summary>
            文档描述
            </summary>
        </member>
        <member name="P:Core.Entities.ApiDocInfo.Path">
            <summary>
            文档地址
            </summary>
        </member>
        <member name="T:Core.Entities.ConfigData">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:Core.Entities.ConfigData.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Core.Entities.ConfigData.Value">
            <summary>
            值 
            </summary>
        </member>
        <member name="T:Core.Entities.EntityInfo">
            <summary>
            defined entity model 
            </summary>
        </member>
        <member name="P:Core.Entities.EntityInfo.Name">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Core.Entities.EntityInfo.NamespaceName">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:Core.Entities.EntityInfo.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:Core.Entities.EntityInfo.Comment">
            <summary>
            类注释
            </summary>
        </member>
        <member name="P:Core.Entities.EntityInfo.Summary">
            <summary>
            类注释
            </summary>
        </member>
        <member name="P:Core.Entities.EntityInfo.IsEnum">
            <summary>
            是否为枚举类
            </summary>
        </member>
        <member name="P:Core.Entities.EntityInfo.PropertyInfos">
            <summary>
            属性
            </summary>
        </member>
        <member name="M:Core.Entities.EntityInfo.GetRequiredNavigation">
            <summary>
            获取导航属性
            </summary>
            <returns></returns>
        </member>
        <member name="T:Core.Entities.Project">
            <summary>
            项目
            </summary>
        </member>
        <member name="T:Core.Entities.TemplateFile">
            <summary>
            模板内容
            </summary>
        </member>
        <member name="P:Core.Entities.TemplateFile.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Core.Entities.TemplateFile.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Core.Entities.TemplateFile.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:Core.Infrastructure.Helper.AssemblyHelper">
            <summary>
            项目帮助类
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.FindProjectFile(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            搜索项目文件.csproj,直到根目录
            </summary>
            <param name="dir">起始目录</param>
            <param name="root">根目录</param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.FindFileInProject(System.String,System.String)">
            <summary>
            在项目中寻找文件
            </summary>
            <param name="projectFilePath"></param>
            <param name="searchFileName"></param>
            <returns>the search file path,return null if not found </returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetAssemblyName(System.IO.FileInfo)">
            <summary>
            解析项目文件xml 获取名称,没有自定义则取文件名
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetProjectType(System.IO.FileInfo)">
            <summary>
            获取项目类型
            </summary>
            <param name="file"></param>
            <returns>oneOf: null/web/console</returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetNamespaceName(System.IO.DirectoryInfo)">
            <summary>
            获取命名空间名称， 不支持MSBuildProjectName表达式
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetSlnFile(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            获取解决方案文件，从当前目录向根目录搜索
            </summary>
            <param name="dir">当前目录</param>
            <param name="root">要目录</param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetGitRoot(System.IO.DirectoryInfo)">
            <summary>
            获取git根目录
            </summary>
            <param name="dir">搜索目录，从该目录向上递归搜索</param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetCurrentToolVersion">
            <summary>
            获取当前工具运行版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetSolutionVersionAsync(System.String)">
            <summary>
            获取解决方案版本
            </summary>
            <param name="solutionPath"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetXmlMembers(System.IO.DirectoryInfo)">
            <summary>
            获取当前项目下的 xml 注释中的members
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.NeedUpdate(System.String)">
            <summary>
            判断是否需要更新
            </summary>
            <param name="minVersionStr">最小版本号</param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetStudioPath">
            <summary>
            获取studio目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetTargetFramework(System.String)">
            <summary>
            get csproject targetFramework 
            </summary>
            <param name="projectPath"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GenerateFileAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成文件
            </summary>
            <param name="dir"></param>
            <param name="fileName"></param>
            <param name="content"></param>
            <param name="cover"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetToolPath">
            <summary>
            获取 dotnet tool 路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.RemoveModuleEntityFiles(System.String)">
            <summary>
            delete module entity files
            </summary>
            <param name="solutionPath"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.GetSolutionType(System.String)">
            <summary>
            get solution type
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.AssemblyHelper.RemovePackageReference(System.String,System.String[])">
            <summary>
            移除项目包
            </summary>
            <param name="projectPath"></param>
            <param name="packageNames"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path">程序集路径</param>
            <param name="dllFilter"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetNamesapce">
            <summary>
            获取命名空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetAllClasses">
            <summary>
            获取所有类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetAllEnumClasses">
            <summary>
            获取所有枚举类型名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetNamespaceNames(System.Collections.Generic.List{System.String})">
            <summary>
            获取一组类型的命名空间
            </summary>
            <param name="classNames"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetClassNameByBaseType(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamedTypeSymbol},System.String)">
            <summary>
            获取的指定基类的所有子类
            </summary>
            <param name="namedTypes">要查找所有类集合</param>
            <param name="baseTypeName">基类名称</param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetNamespacesClasses(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamespaceSymbol})">
            <summary>
            获取命名空间下的类型
            </summary>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.MethodExist(System.String)">
            <summary>
            是否存在某方法
            </summary>
            <param name="methodContent"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.PropertyExist(System.String)">
            <summary>
            是否存在属性
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.InsertInterfaceMethod(System.String)">
            <summary>
            向接口插入方法
            </summary>
            <param name="methodContent"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.AddClassBaseType(System.String)">
            <summary>
            添加基类
            </summary>
            <param name="newImplementContent"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.AddClassProperty(System.String)">
            <summary>
            向类中添加属性
            </summary>
            <param name="propertyContent"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetPropertyTypes">
            <summary>
            获取所有属性类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetParentClassName">
            <summary>
            获取父类名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetClassAttribution(System.String)">
            <summary>
            get class attribution 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CompilationHelper.GetArgumentValue(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax)">
            <summary>
            获取特性参数值
            </summary>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Helper.CSharpAnalysisHelper">
            <summary>
            c# 分析帮助类
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.CSharpAnalysisHelper.GetBaseInterfaceInfoAsync(Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            获取接口类的继承信息
            </summary>
            <param name="compilation"></param>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CSharpAnalysisHelper.ReplaceNodeUsing``1(Microsoft.CodeAnalysis.Editing.DocumentEditor,``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})">
            <summary>
            内容节点编辑
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="editor"></param>
            <param name="node"></param>
            <param name="replacementNode"></param>
        </member>
        <member name="T:Core.Infrastructure.Helper.CSharpCovertHelper">
            <summary>
            csharp 转换帮助
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.CSharpCovertHelper.CheckJson(System.String)">
            <summary>
            判断是否为合法的 json
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.CSharpCovertHelper.GenerateClass(System.Text.Json.JsonElement,System.String)">
            <summary>
            json转C#模型类
            </summary>
            <param name="jsonElement"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Helper.JsonMetadata">
            <summary>
            json 解析的元信息
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.JsonMetadata.Name">
            <summary>
            键名称
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.JsonMetadata.Descents">
            <summary>
            子级元素
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.JsonMetadata.Parent">
            <summary>
            父属性
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.JsonMetadata.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.JsonMetadata.Nullable">
            <summary>
            可空
            </summary>
        </member>
        <member name="T:Core.Infrastructure.Helper.EntityParseHelper">
            <summary>
            类型解析帮助类
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.EntityParseHelper.Name">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.EntityParseHelper.NamespaceName">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.EntityParseHelper.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.EntityParseHelper.Comment">
            <summary>
            类原始注释
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.EntityParseHelper.NgModuleName">
            <summary>
            前端对应模块
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.EntityParseHelper.NgRoute">
            <summary>
            前端对应路由
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.EntityParseHelper.PropertyInfos">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:Core.Infrastructure.Helper.EntityParseHelper.ValidAttributes">
            <summary>
            可复制的特性
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetAssemblyName">
            <summary>
            获取程序集名称
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetEnumMembers(System.String)">
            <summary>
            获取枚举members
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetComment">
            <summary>
            获取 类的注释
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetNgPageAttribute">
            <summary>
            解析类特性，获取Ng需要的模块和路由内容
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetPropertyInfos(System.String)">
            <summary>
            获取该类的所有属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetTypeFromList(System.String)">
            <summary>
            获取原始类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetCommentXml(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            获取属性注释xml内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetCommentSummary(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            获取summary comment
            </summary>
            <param name="syntax"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetAttributeText(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            获取属性特性文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.ParsePropertyType(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary>
            对属性的类型进行解析
            </summary>
            <param name="syntax"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.ParseNavigation(Microsoft.CodeAnalysis.INamedTypeSymbol,Core.Models.PropertyInfo)">
            <summary>
            解析导航属性
            </summary>
            <param name="type"></param>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.ParsePropertyAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax,Core.Models.PropertyInfo)">
            <summary>
            解析属性特性
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetAttributeArguments(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax},System.String)">
            <summary>
            获取特性中的参数内容
            </summary>
            <param name="syntax"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.GetParentClassName">
            <summary>
            获取父类名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.EntityParseHelper.HasBaseType(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            获取最初始基类
            </summary>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Helper.IOHelper">
            <summary>
            文件IO帮助类
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.IOHelper.MoveDirectory(System.String,System.String,System.Boolean)">
            <summary>
            move dir
            </summary>
            <param name="source">dir path</param>
            <param name="target">dir path</param>
            <param name="needBackup"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.IOHelper.ReplaceTemplate(System.String,System.String,System.String)">
            <summary>
            替换模板名称，文件名及内容
            </summary>
            <param name="path"></param>
            <param name="templateName"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.IOHelper.GetCodeFiles(System.String)">
            <summary>
            获取代码文件
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.IOHelper.WriteToFileAsync(System.String,System.String)">
            <summary>
            use UTF8 without bom as default
            </summary>
            <param name="filePath"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Helper.JsonHelper">
            <summary>
            json帮助类
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.JsonHelper.AddOrUpdateJsonNode(System.Text.Json.Nodes.JsonNode,System.String,System.Object)">
            <summary>
            添加或更新json节点
            </summary>
            <param name="root"></param>
            <param name="keyPath"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.JsonHelper.GetValue``1(System.Text.Json.Nodes.JsonNode,System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="keyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.JsonHelper.GetSectionNode(System.Text.Json.Nodes.JsonNode,System.String)">
            <summary>
            获取节点
            </summary>
            <param name="root"></param>
            <param name="keyPath"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Helper.OpenApiHelper">
            <summary>
            openapi 解析帮助类
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.OpenApiHelper.RestApiGroups">
            <summary>
            接口信息
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.OpenApiHelper.ModelInfos">
            <summary>
            所有请求及返回类型信息
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Helper.OpenApiHelper.OpenApiTags">
            <summary>
            tag信息
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.OpenApiHelper.GetRestApiGroups">
            <summary>
            接口信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.OpenApiHelper.GetEntityInfos">
            <summary>
            解析模型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.OpenApiHelper.GetEnumProperties(Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            解析枚举类属性
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.OpenApiHelper.ParseProperties(Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            获取所有属性
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.OpenApiHelper.GetTypeDescription(Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            获取转换成ts的类型
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.OpenApiHelper.GetParamType(Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            解析schema类型
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Helper.ProcessHelper">
            <summary>
            调用帮助类
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.ProcessHelper.RunCommand(System.String,System.String,System.String@)">
            <summary>
            运行命令
            </summary>
            <param name="command">命令程序</param>
            <param name="args">参数</param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.ProcessHelper.ExecuteCommands(System.String[])">
            <summary>
            执行命令，使用cmd/bash
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.ProcessHelper.GetAvailablePort(System.Int32)">
            <summary>
            获取可用端口
            </summary>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Helper.SolutionHelper">
            <summary>
            解决方案解析帮助类
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.GetProject(System.String)">
            <summary>
            
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.AddExistProject(System.String)">
            <summary>
            添加项目
            </summary>
            <param name="projectPath"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.AddProjectReference(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Project)">
            <summary>
            添加项目引用
            </summary>
            <param name="currentProject"></param>
            <param name="referenceProject"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.RenameNamespace(System.String,System.String,System.String)">
            <summary>
            重命名Namespace
            </summary>
            <param name="oldName"></param>
            <param name="newName">为空时，则删除原名称</param>
            <param name="projectName"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.RemoveProject(System.String)">
            <summary>
            从解决方案中移除项目
            </summary>
            <param name="projectName"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.GetReferenceProject(System.String)">
            <summary>
            get projects which reference the give project name
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.RemoveProjectReference(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Project)">
            <summary>
            删除项目引用
            </summary>
            <param name="currentProject"></param>
            <param name="referenceProject"></param>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.MoveDocumentAsync(System.String,System.String,System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="projectName"></param>
            <param name="documentPath"></param>
            <param name="newPath"></param>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Helper.SolutionHelper.RemoveFileAsync(System.String,System.String[])">
            <summary>
            删除文件
            </summary>
            <param name="projectName"></param>
            <param name="documentPaths"></param>
            <returns></returns>
        </member>
        <member name="F:Core.Infrastructure.TplConst.API_SUFFIX">
            <summary>
            控制器后缀
            </summary>
        </member>
        <member name="F:Core.Infrastructure.TplConst.SERVICE_STORES">
            <summary>
            注入服务
            </summary>
        </member>
        <member name="F:Core.Infrastructure.TplConst.STORECONTEXT_PROPS">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:Core.Infrastructure.TplConst.STORECONTEXT_PARAMS">
            <summary>
            构造方法参数
            </summary>
        </member>
        <member name="F:Core.Infrastructure.TplConst.STORECONTEXT_ASSIGN">
            <summary>
            构造方法赋值
            </summary>
        </member>
        <member name="T:Core.Infrastructure.Utils.HashCrypto">
            <summary>
            hash加密
            </summary>
        </member>
        <member name="M:Core.Infrastructure.Utils.HashCrypto.Md5Hash(System.String)">
            <summary>
            字符串md5值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Utils.HashCrypto.Md5FileHash(System.IO.Stream)">
            <summary>
            某文件的md5值
            </summary>
            <param name="stream">file stream</param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Utils.HashCrypto.GetRnd(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            生成随机数
            </summary>
            <param name="length"></param>
            <param name="useNum"></param>
            <param name="useLow"></param>
            <param name="useUpp"></param>
            <param name="useSpe"></param>
            <param name="custom"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Utils.StringExtenstions.ToHyphen(System.String,System.Char)">
            <summary>
            to hyphen style: HelloWord->hellow-word
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Utils.StringExtenstions.ToPascalCase(System.String)">
            <summary>
            to Pascalcase style:hellow-word->HelloWord
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Infrastructure.Utils.StringExtenstions.ToCamelCase(System.String)">
            <summary>
            to camelcase style:hellow-word->hellowWord
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Infrastructure.Utils.TabConst">
            <summary>
            format
            </summary>
        </member>
        <member name="P:Core.Infrastructure.Utils.TabConst.TabSize">
            <summary>
            tab size:spaces
            </summary>
        </member>
        <member name="F:Core.Infrastructure.Utils.TabConst.Two">
            <summary>
            2 spaces
            </summary>
        </member>
        <member name="F:Core.Infrastructure.Utils.TabConst.Four">
            <summary>
            4 spaces
            </summary>
        </member>
        <member name="F:Core.Infrastructure.Utils.TabConst.Eight">
            <summary>
            8 spaces
            </summary>
        </member>
        <member name="T:Core.Models.AssemblyInfo">
            <summary>
            csproj 程序集信息
            </summary>
        </member>
        <member name="P:Core.Models.AssemblyInfo.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Core.Models.AssemblyInfo.Name">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="P:Core.Models.AssemblyInfo.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:Core.Models.AssemblyInfo.Type">
            <summary>
            项目类型
            </summary>
        </member>
        <member name="P:Core.Models.AssemblyInfo.GrpcType">
            <summary>
            grpc类型
            </summary>
        </member>
        <member name="T:Core.Models.ConfigOptions">
            <summary>
            项目配置
            </summary>
        </member>
        <member name="P:Core.Models.ConfigOptions.RootPath">
            <summary>
            项目根目录 
            </summary>
        </member>
        <member name="P:Core.Models.ConfigOptions.DtoPath">
            <summary>
            dto项目目录
            </summary>
        </member>
        <member name="P:Core.Models.ConfigOptions.StorePath">
            <summary>
            废弃属性
            </summary>
        </member>
        <member name="P:Core.Models.ConfigOptions.IdStyle">
            <summary>
            NameId/Id
            </summary>
        </member>
        <member name="P:Core.Models.ConfigOptions.IsSplitController">
            <summary>
            控制器是否拆分
            </summary>
        </member>
        <member name="P:Core.Models.ConfigOptions.WebAppPath">
            <summary>
            前端路径
            </summary>
        </member>
        <member name="P:Core.Models.DtoInfo.EntityNamespace">
            <summary>
            原始实体的命名空间完整名称
            </summary>
        </member>
        <member name="M:Core.Models.DtoInfo.ToDtoContent(System.String,System.String,System.Boolean)">
            <summary>
            dto class content
            </summary>
            <param name="projectName"></param>
            <param name="entityName"></param>
            <param name="isInput"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Models.GenFileInfo">
            <summary>
            生成文件的信息，主要用来存储多个文件生成的内容
            </summary>
        </member>
        <member name="M:Core.Models.GenFileInfo.#ctor(System.String,System.String)">
            <summary>
            生成文件的信息，主要用来存储多个文件生成的内容
            </summary>
        </member>
        <member name="P:Core.Models.GenFileInfo.Name">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Core.Models.GenFileInfo.CanModify">
            <summary>
            是否可被用户编辑，如果可编辑，则不能覆盖用户代码
            </summary>
        </member>
        <member name="P:Core.Models.GenFileInfo.Path">
            <summary>
            相对文件夹名称
            </summary>
        </member>
        <member name="P:Core.Models.GenFileInfo.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.IsList">
            <summary>
            是否是数组
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.IsNavigation">
            <summary>
            是否为导航属性
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.NavigationName">
            <summary>
            导航属性类名称
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.HasMany">
            <summary>
            导航属性的对应关系
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.HasSet">
            <summary>
            是否包括set方法
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.CommentXml">
            <summary>
            xml comment
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.CommentSummary">
            <summary>
            comment summary
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.IsRequired">
            <summary>
            是否必须
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.IsNullable">
            <summary>
            可空?
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.SuffixContent">
            <summary>
            尾缀，如#endregion
            </summary>
        </member>
        <member name="P:Core.Models.PropertyInfo.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="M:Core.Models.PropertyInfo.ToCsharpLine(System.Boolean)">
            <summary>
            转换成C#属性
            </summary>
            <param name="isInput">是否作为输入属性</param>
            <returns></returns>
        </member>
        <member name="T:Core.Models.RequestServiceFile">
            <summary>
            服务文件
            </summary>
        </member>
        <member name="M:Core.Models.RequestServiceFile.ToNgService">
            <summary>
            生成angluar http client service
            </summary>
            <returns></returns>
        </member>
        <member name="T:Core.Models.RequestServiceFunction">
            <summary>
            请求服务的函数
            </summary>
        </member>
        <member name="P:Core.Models.RequestServiceFunction.ResponseRefType">
            <summary>
            返回中的引用类型
            </summary>
        </member>
        <member name="P:Core.Models.RequestServiceFunction.RequestRefType">
            <summary>
            请求中的引用类型
            </summary>
        </member>
        <member name="P:Core.Models.RequestServiceFunction.Params">
            <summary>
            参数及类型
            </summary>
        </member>
        <member name="P:Core.Models.RequestServiceFunction.Path">
            <summary>
            相对请求路径
            </summary>
        </member>
        <member name="P:Core.Models.RequestServiceFunction.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="T:Core.Models.FunctionParams">
            <summary>
            函数参数
            </summary>
        </member>
        <member name="P:Core.Models.FunctionParams.InPath">
            <summary>
            是否路由参数
            </summary>
        </member>
        <member name="T:Core.Models.RestApiInfo">
            <summary>
            接口信息
            </summary>
        </member>
        <member name="P:Core.Models.RestApiInfo.OperationType">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="P:Core.Models.RestApiInfo.Router">
            <summary>
            路由
            </summary>
        </member>
        <member name="P:Core.Models.RestApiInfo.Summary">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:Core.Models.RestApiInfo.QueryParameters">
            <summary>
            请求查询参数
            </summary>
        </member>
        <member name="P:Core.Models.RestApiInfo.RequestInfo">
            <summary>
            请求类型参数
            </summary>
        </member>
        <member name="P:Core.Models.RestApiInfo.ResponseInfo">
            <summary>
            返回类型内容p
            </summary>
        </member>
        <member name="T:Core.Models.RestApiGroup">
            <summary>
            接口分组信息
            </summary>
        </member>
    </members>
</doc>
